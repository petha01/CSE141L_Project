mov r0, 0               // index
mov r2, 0
mov r3, 31               // byte_occurrences
mov r6, 0               // total_occurrences
mov r7, 32               // byte_occurrences 

BitLoop:

mov r7, 32               // byte_occurrences 
ld r2, r7               // 5 bit pattern

mov r7, 5

innerfour:
mov r3, 31
ld r1, r0               // value on mem[0:31]
rsl r1, r7
and r1, r3             // r3 = 0 0 0 1 1 1 1 1
xor r1, r2             // xor(X X X X X 0 0 0, and pattern)
blqz r1, adder

adder:
add r6, 1              // add to bit counter for mem[33]
add r7, 1              //  5 -> 6 -> 7 -> 8   
mov r1, -30
mov r3, 0 
add r3, r7
add r1, 22             // r1 = -8
add r1, r7             // jump if r1 = 9 
blqz r1, innerfour

add r0, 1             // check if we get to index 31
mov r1, -30
mov r7, -1
add r1, r7            // r1 = - 31

add r1, r0 
blqz r1, BitLoop

mov r1, 33
st r1, r6

