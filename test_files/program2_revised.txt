// input
// mem[30] =   b4  b3  b2  p4  b1  p2  p1  p0
// mem[31] =  b11 b10  b9  b8  b7  b6  b5  p8 
// output
// mem[1] =    0   0   0   0   0 b11 b10  b9
// mem[0] =   b8  b7  b6  b5  b4  b3  b2  b1

mov r0, 30       // counter
mov r7, 0       // register for MSW
mov r6, 0       // register for LSW 

loop:
mov r3, 1
// compare p8
add r3, r0
ld r1, r3       // r1 =  b11 b10  b9  b8  b7  b6  b5  p8
ld r2, r3      

rsl r2, 4  
mov r7, 15
and r2, r7      // r2 = 0 0 0 0 b11 b10  b9  b8 
and r1, r7      // r1 = 0 0 0 0 b7  b6  b5  p8
xor r2, r1      // r2 = xor(b11,7  b10,6  b9,5  b8,p8) 

mov r1, 0
add r1, r2      
rsl r1, 6
and r1, 3      // r1 = 0 0 0 0 0 0 xor(b11,7  b10,6)
and r2, 3      // r2 = 0 0 0 0 0 0 xor(b9,5  b8,p8)
xor r2, r1     // r2 = xor(b11,7,9,5  b10,6,8,p8)

mov r1, 0
add r1, r2      
rsl r1, 7
mov r7, 1
and r1, r7      // r1 = 0 0 0 0 0 0 0 xor(b11,7,9,5)
and r2, r7      // r2 = 0 0 0 0 0 0 0 xor(b10,6,8,p8)
xor r2, r1     // r2 = xor(b11:5, p8)

mov r6, 8      // 0 0 0 0 1 0 0 0
rsl r2, 3
and r6, r2

// compare p4
ld r1, r3       // r1 = b11 b10  b9  b8  b7  b6  b5  p8
ld r2, r0       // r2 = b4  b3  b2  p4  b1  p2  p1  p0 

rsl r1, 4
rsl r2, 4  
and r1, 15      // r1 = 0 0 0 0 b11 b10 b9 b8
and r2, 15      // r2 = 0 0 0 0 b4  b3  b2  p4
xor r2, r1      // r2 = xor(b11,4  b10,3  b9,2  b8,p4)

mov r1, 0
add r1, r2      
rsl r1, 6
and r1, 3      // r1 = 0 0 0 0 0 0 xor(b11,4  b10,3)
and r2, 3      // r2 = 0 0 0 0 0 0 xor(b9,2  b8,p4)
xor r2, r1     // r2 = xor(b11,9,4,2  b10,8,6,p4)

mov r1, 0
add r1, r2      
rsl r1, 7
and r1, r7      // r1 = 0 0 0 0 0 0 0 xor(b11,9,4,2)
and r2, r7      // r2 = 0 0 0 0 0 0 0 xor(b10,8,6,p4)
xor r2, r1     // r2 = xor(b11:8, b4, b3, b2, p4)

rsl r2, 2
and r2, 4     // r6 = 0 0 0 0 p8? p4? 0 0 match???
add r6, r2

// compare p2
ld r1, r3       // r1 = b11 b10  b9  b8  b7  b6  b5  p8
ld r2, r0       // r2 = b4  b3  b2  p4  b1  p2  p1  p0 


and r1, 204     // r1 = b11 b10  0  0  b7  b6  0  0
and r2, 204     // r2 = b4  b3  0  0  b1  p2  0  0 
xor r2, r1      // r2 = xor(b11,4  b10,3  0 0 b7,1  b6,p2 0 0)

mov r1, 0
add r1, r2      
rsl r1, 2
rsl r2, 6
and r1, 3      // r1 = 0 0 0 0 0 0 xor(b11,4  b10,3)
and r2, 3      // r2 = 0 0 0 0 0 0 xor(b7,1  b6,p2)
xor r2, r1     // r2 = xor(b11,7,4,1  b10,3,6,p2)

mov r1, 0
add r1, r2      
rsl r1, 7
mov r7, 1
and r1, r7      // r1 = 0 0 0 0 0 0 0 xor(b11,9,4,2)
and r2, r7      // r2 = 0 0 0 0 0 0 0 xor(b10,8,6,p4)
xor r2, r1     // r2 = xor(b11, b10, b7, b6, b4, b3, b1, p2)

rsl r2, r7     // 0 0 0 0 0 0 1 0
and r2, 2
add r6, r2     // r6 = 0 0 0 0 p8? p4? p2? 0 match???

// compare p1
ld r1, r3       // r1 = b11 b10  b9  b8  b7  b6  b5  p8
ld r2, r0       // r2 = b4  b3  b2  p4  b1  p2  p1  p0 

and r1, 170     // r1 = b11 0  b9  0  b7  0  b5  0
and r2, 170     // r2 = b4  0  b2  0  b1  0  p1  0 
xor r2, r1      // r2 = xor(b11,4  0  b9,2  0 b7,1  0 b5,p1  0)

mov r1, 0
add r1, r2      
rsl r1, 3
rsl r2, 7
and r1, 5      // r1 = 0 0 0 0 0    b11,4   0   b9,2
and r2, 5      // r2 = 0 0 0 0 0    b7,1    0   b5,p1
xor r2, r1     // r2 = 0 0 0 0 0  xor(b11,7,4,1)  0  xor(b9,2,5,p2)

mov r1, 0
add r1, r2      
rsl r1, 6
and r1, r7      // r1 = 0 0 0 0 0 0 0 xor(b11,7,4,1)
and r2, r7      // r2 = 0 0 0 0 0 0 0 xor(b9,2,5,p2)
xor r2, r1     // r2 = xor(b11, b9, b7, b5, b4, b2, b1, p1)

and r2, r7      // 0 0 0 0 0 0 0 1
add r6, r2     // r6 = 0 0 0 0 p8? p4? p2? p1?     match???

// calculate p0
ld r1, r3       // r1 = b11 b10  b9  b8  b7  b6  b5  p8
ld r2, r0       // r2 = b4  b3  b2  p4  b1  p2  p1  p0 
xor r2, r1      // r2 = b11,4 10,3 9,2 8,p4 7,1 6,p2 5,p1 p8,p0

mov r1, 0
add r1, r2      
rsl r1, 4
and r1, 15
and r2, 15
xor r2, r1      // 0 0 0 0  11,4,7,1  10,3,6,p2  9,2,5,p1   8,p4,p8,p0

mov r1, 0
add r1, r2      
rsl r1, 6
and r1, 3
and r2, 3      
xor r2, r1     // r2 = 0 0 0 0 0 0 xor(b11,7,4,1,b9,2,5,p2)  xor(10,3,6,p2,8,p4,p8,p0)

mov r1, 0
add r1, r2      
rsl r1, 7
and r1, r7
and r2, r7   
xor r2, r1     // xor(b11:1, p8, p4, p2, p1, p0)

blqz r2 zerotwo

// r6 = number
// if r6 < 8,
// you want to left shift 1 by NUMBER and
// XOR it with em[30] which causes it to flip
// if r6 >= 8 
// you want to left shift 1 by NUMBER - 8 and
// XOR it with mem[31] which causes it to flip


ld r1, r0            // mem[30] =  r1 = b4  b3  b2  p4  b1  p2  p1  p0
add r0, 1
ld r3, r0            // mem[31] =  r3 = b11 b10  b9  b8  b7  b6  b5  p8 

rsl r7, r6           // shift 1 to the right index

xor r1, r7           // flip in mem[30]
xor r3, r7           // flip in mem[31]

mov r7, 0 
add r7, r6
and r7, 8             // get the 8th bit: 0 0 0 0 X 0 0 0 
rsl r7, 5
rsl r7, r6            // put 8th bit in position
xor r1, r7            
xor r3, r7            // xor(val) for both mem[30] and mem[31]

mov r7, 1
rsl r7, r6           // shift 1 to the right index
xor r3, r7           // flip in mem[31] ONLY

st r0, r3            // STORE mem[0] and mem[1] back to the original w/ FLIPPED
mov r7, -1                // go back to LSW
add r0, r7
st r0, r1

mov r7, 0           // add the 1
mov r3, 1           // add 0 1 0 0 0 0 b11:9
rsl r3, 6
add r7, r1

// forcefully JUMP
mov r3, 0
blqz r3, zero


zerotwo:
mov r7, 0
blqz r6 zero        // if r6 = 0, do nothing,     0 0 0 0 0 b11 b10 b9
mov r3, 1           // else, there are 2 errors,  1 0 0 0 0 b11 b10 b9
rsl r3, 7
add r7, r3


zero:
mov r3, 1
mov r6, 0


// calculating
add r3, r0
ld r1, r3      // r1 = mem[r3]
mov r3, 3
rsl r1, r2     // position the 3 bits
mov r2, 7
and r1, r2     // 7 = binary 00000111. X X 0 0 0 b11 b10 b9
add r7, r1

ld r1, r3       // r1 = mem[r3]
mov r2, 30
and r1, r2      // 30 = binary 00011110. Keep b8 to b5
mov r2, 3
rsl r1, r2      // position the 4 bits
add r6, r1

ld r1, r0       // r1 = mem[r0]
mov r2, 224
and r1, r2      // 224 = binary 11100000. Keep the b4 to b2
mov r2, 4
rsl r1, r2      // position the 3 bits
add r6, r1

ld r1, r0       // r1 = mem[r0]
mov r2, 8
and r1, r2      // 8 = binary 00001000. Keep b1 only
mov r2, 5
rsl r1, r2      // position the bit
add r6, r1

// r7 = MSW = mem[1] = 0   0   0   0   0 b11 b10  b9
// r6 = LSW = mem[0] =   b8  b7  b6  b5  b4  b3  b2  b1

mov r2, -30
add r2, r0
st r2, r6       // Store the LSW
mov r3, 1
add r2, r3      
st r2, r7       // Store the MSW

// increment counter for next 
add r0, 2

mov r2, 1
add r2, r0     // MSW = r0 // 60 - 30 - 30 + 1 = 1 then end

mov r3, -30
add r2, r3
mov r3, -30
add r2, r3

blqz r2, loop