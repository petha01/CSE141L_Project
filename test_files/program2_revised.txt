// input
// mem[30] =   b4  b3  b2  p4  b1  p2  p1  p0
// mem[31] =  b11 b10  b9  b8  b7  b6  b5  p8 
// output
// mem[1] =    0   0   0   0   0 b11 b10  b9
// mem[0] =   b8  b7  b6  b5  b4  b3  b2  b1

mov r0, 0       // counter
mov r7, 0       // register for MSW
mov r6, 0       // register for LSW 

loop:
mov r3, 31
add r3, r0
ld r1, r3      // r1 = mem[r3]
mov r2, 224
and r1, r2     // 224 = binary 11100000. Keep the b11 to b9
mov r2, 3
rsl r1, r2     // position the 3 bits
add r7, r1

mov r3, 31
add r3, r0      // r3 = 31 + r0
ld r1, r3       // r1 = mem[r3]
mov r2, 30
and r1, r2      // 30 = binary 00011110. Keep b8 to b5
mov r2, 3
rsl r1, r2      // position the 4 bits
add r6, r1

mov r3, 30
add r3, r0      // r3 = 30 + r0
ld r1, r3       // r1 = mem[r3]
mov r2, 224
and r1, r2      // 224 = binary 11100000. Keep the b4 to b2
mov r2, 4
rsl r1, r2      // position the 3 bits
add r6, r1

mov r3, 30
add r3, r0      // r3 = 30 + r0
ld r1, r3       // r1 = mem[r3]
mov r2, 8
and r1, r2      // 8 = binary 00001000. Keep b1 only
mov r2, 5
rsl r1, r2      // position the bit
add r6, r1

st r0, r6       // Store the LSW
mov r2, 1
add r0, r2      // increment counter
st r0, r7       // Store the MSW
add r0, r2      // increment counter

mov r2, -30
add r2, r0
blqz r2, loop